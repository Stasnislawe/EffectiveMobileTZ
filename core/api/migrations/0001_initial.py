# Generated by Django 4.2.25 on 2025-10-03 12:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(db_index=True, help_text='Уникальный email пользователя, используется для входа в систему', max_length=254, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(blank=True, help_text='Имя пользователя', max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, help_text='Фамилия пользователя', max_length=150, verbose_name='Фамилия')),
                ('middle_name', models.CharField(blank=True, help_text='Отчество пользователя', max_length=150, verbose_name='Отчество')),
                ('is_active', models.BooleanField(default=True, help_text='Отметьте, если пользователь может входить в систему', verbose_name='Активен')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Дата и время мягкого удаления пользователя', null=True, verbose_name='Дата удаления')),
                ('is_staff', models.BooleanField(default=False, help_text='Определяет, может ли пользователь входить в админку Django', verbose_name='Staff статус')),
                ('is_superuser', models.BooleanField(default=False, help_text='Определяет, имеет ли пользователь все права без явного назначения', verbose_name='Superuser статус')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Дата и время создания учетной записи', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата и время последнего обновления учетной записи', verbose_name='Дата обновления')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Уникальное название роли (admin, manager, user, etc.)', max_length=100, unique=True, verbose_name='Название роли')),
                ('description', models.TextField(blank=True, help_text='Подробное описание роли и её назначения', verbose_name='Описание')),
                ('is_system', models.BooleanField(default=False, help_text='Отметьте для системных ролей, которые нельзя удалять', verbose_name='Системная роль')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Дата и время создания роли', verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
                'db_table': 'roles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RevokedToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jti', models.CharField(db_index=True, help_text='Уникальный идентификатор JWT токена', max_length=255, unique=True, verbose_name='JWT ID')),
                ('revoked_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Дата и время отзыва токена', verbose_name='Время отзыва')),
                ('expires_at', models.DateTimeField(help_text='Дата и время истечения срока действия токена', verbose_name='Время истечения')),
            ],
            options={
                'verbose_name': 'Отозванный токен',
                'verbose_name_plural': 'Отозванные токены',
                'db_table': 'revoked_tokens',
                'indexes': [models.Index(fields=['jti'], name='revoked_tok_jti_8c2714_idx'), models.Index(fields=['expires_at'], name='revoked_tok_expires_cdc4fe_idx')],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(help_text='Тип бизнес-объекта (project, order, product, etc.)', max_length=100, verbose_name='Тип контента')),
                ('object_id', models.PositiveIntegerField(help_text='ID конкретного бизнес-объекта', verbose_name='ID объекта')),
                ('metadata', models.JSONField(blank=True, help_text='Дополнительные метаданные ресурса в формате JSON', null=True, verbose_name='Метаданные')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Дата и время создания записи ресурса', verbose_name='Дата создания')),
                ('owner', models.ForeignKey(help_text='Пользователь, который владеет этим ресурсом', on_delete=django.db.models.deletion.CASCADE, related_name='owned_resources', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'Ресурс',
                'verbose_name_plural': 'Ресурсы',
                'db_table': 'resources',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BusinessElement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Уникальное название бизнес-элемента (users, products, orders, etc.)', max_length=100, unique=True, verbose_name='Название элемента')),
                ('description', models.TextField(blank=True, help_text='Подробное описание назначения бизнес-элемента', verbose_name='Описание')),
                ('category', models.CharField(default='general', help_text='Категория для группировки бизнес-элементов', max_length=100, verbose_name='Категория')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Дата и время создания бизнес-элемента', verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Бизнес-элемент',
                'verbose_name_plural': 'Бизнес-элементы',
                'db_table': 'business_elements',
                'ordering': ['category', 'name'],
                'indexes': [models.Index(fields=['name', 'category'], name='business_el_name_ca6caa_idx')],
            },
        ),
        migrations.CreateModel(
            name='ACLEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('principal_type', models.CharField(choices=[('user', 'User'), ('role', 'Role')], help_text='Тип сущности, для которой назначаются права (user или role)', max_length=10, verbose_name='Тип principal')),
                ('principal_id', models.PositiveIntegerField(help_text='ID пользователя или роли, для которой назначаются права', verbose_name='ID principal')),
                ('can_read', models.BooleanField(default=False, help_text='Разрешает чтение этого конкретного ресурса', verbose_name='Чтение')),
                ('can_update', models.BooleanField(default=False, help_text='Разрешает обновление этого конкретного ресурса', verbose_name='Обновление')),
                ('can_delete', models.BooleanField(default=False, help_text='Разрешает удаление этого конкретного ресурса', verbose_name='Удаление')),
                ('is_inheritable', models.BooleanField(default=True, help_text='Определяет, наследуются ли права дочерними ресурсами', verbose_name='Наследуется')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Дата и время создания ACL записи', verbose_name='Дата создания')),
                ('expires_at', models.DateTimeField(blank=True, help_text='Дата и время истечения срока действия ACL записи', null=True, verbose_name='Срок действия')),
                ('resource', models.ForeignKey(help_text='Ресурс, к которому предоставляется доступ', on_delete=django.db.models.deletion.CASCADE, related_name='acl_entries', to='api.resource', verbose_name='Ресурс')),
            ],
            options={
                'verbose_name': 'ACL запись',
                'verbose_name_plural': 'ACL записи',
                'db_table': 'acl_entries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AccessRoleRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_all_permission', models.BooleanField(default=False, help_text='Разрешает чтение ЛЮБЫХ объектов этого типа', verbose_name='Чтение всех объектов')),
                ('create_permission', models.BooleanField(default=False, help_text='Разрешает создание новых объектов этого типа', verbose_name='Создание объектов')),
                ('update_all_permission', models.BooleanField(default=False, help_text='Разрешает редактирование ЛЮБЫХ объектов этого типа', verbose_name='Редактирование всех объектов')),
                ('delete_all_permission', models.BooleanField(default=False, help_text='Разрешает удаление ЛЮБЫХ объектов этого типа', verbose_name='Удаление всех объектов')),
                ('read_own_permission', models.BooleanField(default=False, help_text='Разрешает чтение только СВОИХ объектов этого типа', verbose_name='Чтение своих объектов')),
                ('update_own_permission', models.BooleanField(default=False, help_text='Разрешает редактирование только СВОИХ объектов этого типа', verbose_name='Редактирование своих объектов')),
                ('delete_own_permission', models.BooleanField(default=False, help_text='Разрешает удаление только СВОИХ объектов этого типа', verbose_name='Удаление своих объектов')),
                ('can_export', models.BooleanField(default=False, help_text='Разрешает экспорт данных этого типа', verbose_name='Экспорт данных')),
                ('can_import', models.BooleanField(default=False, help_text='Разрешает импорт данных этого типа', verbose_name='Импорт данных')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Дата и время создания правила доступа', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата и время последнего обновления правила доступа', verbose_name='Дата обновления')),
                ('element', models.ForeignKey(help_text='Бизнес-элемент, к которому предоставляется доступ', on_delete=django.db.models.deletion.CASCADE, related_name='access_rules', to='api.businesselement', verbose_name='Бизнес-элемент')),
                ('role', models.ForeignKey(help_text='Роль, для которой определяется правило доступа', on_delete=django.db.models.deletion.CASCADE, related_name='access_rules', to='api.role', verbose_name='Роль')),
            ],
            options={
                'verbose_name': 'Правило доступа',
                'verbose_name_plural': 'Правила доступа',
                'db_table': 'access_roles_rules',
                'ordering': ['role', 'element'],
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Уникальный идентификатор сессии', primary_key=True, serialize=False, verbose_name='ID сессии')),
                ('is_active', models.BooleanField(default=True, help_text='Отметьте, если сессия активна', verbose_name='Активна')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Дата и время создания сессии', verbose_name='Дата создания')),
                ('expires_at', models.DateTimeField(help_text='Дата и время истечения срока действия сессии', verbose_name='Дата истечения')),
                ('last_activity_at', models.DateTimeField(auto_now=True, help_text='Дата и время последней активности в сессии', verbose_name='Последняя активность')),
                ('user', models.ForeignKey(help_text='Пользователь, к которому относится сессия', on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Сессия пользователя',
                'verbose_name_plural': 'Сессии пользователей',
                'db_table': 'user_sessions',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'is_active'], name='user_sessio_user_id_bb1b83_idx'), models.Index(fields=['expires_at', 'is_active'], name='user_sessio_expires_45697a_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Дата и время назначения роли пользователю', verbose_name='Время назначения')),
                ('assigned_by', models.ForeignKey(help_text='Пользователь, который выполнил назначение роли', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_roles', to=settings.AUTH_USER_MODEL, verbose_name='Назначивший')),
                ('role', models.ForeignKey(help_text='Роль, назначенная пользователю', on_delete=django.db.models.deletion.CASCADE, related_name='role_users', to='api.role', verbose_name='Роль')),
                ('user', models.ForeignKey(help_text='Пользователь, которому назначена роль', on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Роль пользователя',
                'verbose_name_plural': 'Роли пользователей',
                'db_table': 'user_roles',
                'ordering': ['-assigned_at'],
                'indexes': [models.Index(fields=['user', 'role'], name='user_roles_user_id_801a9e_idx')],
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['content_type', 'object_id'], name='resources_content_197a22_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['owner', 'content_type'], name='resources_owner_i_afd747_idx'),
        ),
        migrations.AddIndex(
            model_name='aclentry',
            index=models.Index(fields=['resource', 'principal_type', 'principal_id'], name='acl_entries_resourc_3dd741_idx'),
        ),
        migrations.AddIndex(
            model_name='aclentry',
            index=models.Index(fields=['expires_at'], name='acl_entries_expires_9a41b3_idx'),
        ),
        migrations.AddIndex(
            model_name='accessrolerule',
            index=models.Index(fields=['role', 'element'], name='access_role_role_id_0adde0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='accessrolerule',
            unique_together={('role', 'element')},
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email', 'is_active'], name='users_email_a7cfd1_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'deleted_at'], name='users_is_acti_6555e2_idx'),
        ),
    ]
